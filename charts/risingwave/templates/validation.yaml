{{/*
Copyright RisingWave Labs
SPDX-License-Identifier: APACHE-2.0
*/}}

{{/*
Validate state store backends.
*/}}
{{- $count := 0 -}}
{{- $name := "" }}
# Count without MinIO.
{{- with .Values.stateStore }}
  {{- if .s3.enabled }}{{ $count = add1 $count }}{{ $name = "S3" }}{{- end }}
  {{- if .gcs.enabled }}{{ $count = add1 $count }}{{ $name = "GCS" }}{{- end }}
  {{- if .oss.enabled }}{{ $count = add1 $count }}{{ $name = "OSS" }}{{- end }}
  {{- if .azblob.enabled }}{{ $count = add1 $count }}{{ $name = "AZBLOB" }}{{- end }}
  {{- if .hdfs.enabled }}{{ $count = add1 $count }}{{ $name = "HDFS" }}{{- end }}
  {{- if .obs.enabled }}{{ $count = add1 $count }}{{ $name = "OBS" }}{{- end }}
{{- end }}
# If there's no state store and bundled minio enabled, count = 1
{{- if (include "risingwave.bundle.minio.enabled" .) }}
  {{- if and (eq $count 0) }}
    {{ $count = add1 $count }}
    {{ $name = "MinIO" }}
  {{- else }}
    {{- printf "Unnecessary bundled minio when %s is enabled! Try setting `tags.minio=false,tags.bundle=false` and retry!" $name | fail }}
  {{- end }}
{{- else }}
  {{- if .Values.stateStore.minio.enabled }}{{ $count = add1 $count }}{{ $name = "MinIO" }}{{- end }}
{{- end }}
{{- if (eq $count 0 ) }}
  {{- fail "No state store backend!\n  Please set up one of S3, MinIO, GCS, OSS, AZBLOB, HDFS, and OBS under `stateStore`, or use the bundled MinIO by setting `tags.minio=true`!" }}
{{- else if (gt $count 1) }}
  {{- fail "More than one state store backends!" }}
{{- end }}

{{/*
Validate the embedded MinIO.
*/}}
{{- if (include "risingwave.bundle.minio.enabled" .) }}
  {{- if empty .Values.minio.defaultBuckets }}
    {{- fail "Set at least one bucket in `minio.defaultBuckets`!" }}
  {{- end }}
{{- end }}

{{/*
Validate meta store backends.
*/}}
{{- $count = 0 -}}
{{- $name = "" }}
# Count without etcd.
{{- with .Values.metaStore }}
{{/*  {{- if .etcd.enabled }}{{ $count = add1 $count }}{{ $name = "etcd" }}{{- end }}*/}}
{{- end }}
# If there's no state store and bundled minio enabled, count = 1
{{- if (include "risingwave.bundle.etcd.enabled" .) }}
  {{- if and (eq $count 0) }}
    {{ $count = add1 $count }}
    {{ $name = "etcd" }}
  {{- else }}
    {{- printf "Unnecessary bundled etcd when %s is enabled!" $name | fail }}
  {{- end }}
{{- else }}
  {{- if .Values.metaStore.etcd.enabled }}{{ $count = add1 $count }}{{ $name = "etcd" }}{{- end }}
{{- end }}
{{- if (eq $count 0 ) }}
  {{- fail "No meta store backend!\n  Please set up an external etcd under `metaStore`, or use the bundled one by setting `tags.etcd=true`!" }}
{{- else if (gt $count 1) }}
  {{- fail "More than one meta store backends!" }}
{{- end }}

{{/*
Validate parameters of etcd meta store.
*/}}
{{- if not (include "risingwave.bundle.etcd.enabled" .) }}
  {{- if .Values.metaStore.etcd.enabled }}
    {{- if empty .Values.metaStore.etcd.endpoints }}
      {{- fail "Meta store etcd endpoints must be set!" }}
    {{- end }}
    {{- if .Values.metaStore.etcd.authentication.enabled }}
      {{- if not (or .Values.metaStore.etcd.authentication.existingSecretName
        (and .Values.metaStore.etcd.authentication.username .Values.metaStore.etcd.authentication.password)) }}
        {{- fail "Meta store etcd's authentication is enabled, either existing secret or username/password should be provided!" }}
      {{- end }}
    {{- end }}
  {{- end }}
{{- end }}

{{/*
Validate parameters of S3 state store.
*/}}
{{- with .Values.stateStore.s3 }}
  {{- if .enabled }}
    {{- if empty .bucket }}
      {{- fail "Bucket .stateStore.s3.bucket must be set!" }}
    {{- end }}
    {{- if empty .region }}
      {{- fail "Region .stateStore.s3.region must be set!" }}
    {{- end }}
    {{- if and (empty .authentication.existingSecretName) (not .authentication.useServiceAccount) }}
      {{- if or (empty .authentication.accessKey) (empty .authentication.secretAccessKey)}}
        {{- fail "Either use IAM role for Service account or AccessKey/SecretAccessKey must be provided!\nCheck .stateStore.s3.authentication for details!" }}
      {{- end }}
    {{- end }}
  {{- end }}
{{- end }}

{{/*
Validate parameters of external MinIO state store.
*/}}
{{- if not (include "risingwave.bundle.minio.enabled" .) }}
  {{- with .Values.stateStore.minio }}
    {{- if .enabled }}
      {{- if empty .endpoint }}
        {{- fail "Endpoint .stateStore.minio.endpoint must be set!" }}
      {{- end }}
      {{- if empty .bucket }}
        {{- fail "Bucket .stateStore.minio.bucket must be set!" }}
      {{- end }}
      {{- if empty .authentication.existingSecretName }}
        {{- if or (empty .authentication.username) (empty .authentication.password) }}
          {{- fail "Username/password must be provided!\nCheck .stateStore.minio.authentication for details!" }}
        {{- end }}
      {{- end }}
    {{- end }}
  {{- end }}
{{- end }}

{{/*
Validate parameter of GCS state store.
*/}}
{{- with .Values.stateStore.gcs }}
  {{- if .enabled }}
    {{- if empty .bucket }}
      {{- fail "Bucket .stateStore.gcs.bucket must be set!" }}
    {{- end }}
    {{- if not .authentication.useServiceAccount }}
      {{- if and (empty .authentication.credentials) (empty .authentication.existingSecretName) }}
        {{- fail "Credentials must be provided!\nCheck .stateStore.gcs.authentication for details!" }}
      {{- end }}
    {{- end }}
  {{- end }}
{{- end }}

{{/*
Validate parameters of OSS state store.
*/}}
{{- with .Values.stateStore.oss }}
  {{- if .enabled }}
    {{- if empty .bucket }}
      {{- fail "Bucket .stateStore.oss.bucket must be set!" }}
    {{- end }}
    {{- if empty .region }}
      {{- fail "Region .stateStore.oss.region must be set!" }}
    {{- end }}
    {{- if not .authentication.useServiceAccount }}
      {{- if and (empty .authentication.existingSecretName) (or (empty .authentication.accessKey) (empty .authentication.secretAccessKey)) }}
        {{- fail "Either use ServiceAccount to provide credentials, or AccessKey/SecretAccessKey must be provided!\nCheck .stateStore.oss.authentication for details!" }}
      {{- end }}
    {{- end }}
  {{- end }}
{{- end }}

{{/*
Validate parameters of OBS state store.
*/}}
{{- with .Values.stateStore.obs }}
  {{- if .enabled }}
    {{- if empty .bucket }}
      {{- fail "Bucket .stateStore.obs.bucket must be set!" }}
    {{- end }}
    {{- if empty .region }}
      {{- fail "Region .stateStore.obs.region must be set!" }}
    {{- end }}
    {{- if and (empty .authentication.existingSecretName) (not .authentication.useServiceAccount) }}
      {{- if or (empty .authentication.accessKey) (empty .authentication.secretAccessKey) }}
        {{- fail "Either use ServiceAccount to provide credentials, or AccessKey/SecretAccessKey must be provided!\nCheck .stateStore.obs.authentication for details!" }}
      {{- end }}
    {{- end }}
  {{- end }}
{{- end }}

{{/*
Validate parameters of AzureBlob state store.
*/}}
{{- with .Values.stateStore.azblob }}
  {{- if .enabled }}
    {{- if empty .endpoint }}
      {{- fail "Endpoint .stateStore.azblob.endpoint must be set!" }}
    {{- end }}
    {{- if empty .container }}
      {{- fail "Container .stateStore.azblob.container must be set!" }}
    {{- end }}
    {{- if and (empty .authentication.existingSecretName) (not .authentication.useServiceAccount) }}
      {{- if or (empty .authentication.accountName) (empty .authentication.accountKey) }}
        {{- fail "Either use ServiceAccount to provide credentials, or AccountName/AccountKey must be provided!\nCheck .stateStore.azblob.authentication for details!" }}
      {{- end }}
    {{- end }}
  {{- end }}
{{- end }}
